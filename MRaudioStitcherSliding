#! /opt/local/bin/bash
#-x
set -o errexit

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------




#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

num=1
total=0
sr=44100
lastDuration=0

offset=${1:-4}

for file in *.aiff
do 
	
	eval $(ffprobe -v quiet -show_format -of flat=s=_ -show_entries stream=duration "$file");
	duration=${format_duration%.*}; #bash can't do floating point math so truncate!
	
	if (( $num > 1 )); then
	
		crossTime=$(( "$lastDuration" - "$offset" ))	
		#calsulate num of samples
		crossFormat=$(( "$crossTime" * "$sr" ))
		
		echo $crossFormat
	fi
	
	if (($num == 2));then

		ffmpeg -y -i "$lastFile" -i "$file" -filter_complex acrossfade=ns="$crossFormat":c1=hsin:c2=hsin output.aiff
		
	elif (($num > 2));then
		
		#make sure we don't use output.aiff as the second input file...
		#don't need to check for output2.aiff since it gets destroyed at the end of each loop
		if [[ "$file" != "output.aiff" ]] && [[ "$file" != "output2.aiff" ]]; then
		
			ffmpeg -y -i output.aiff -i "$file" -filter_complex acrossfade=ns="$crossFormat":c1=hsin:c2=hsin output2.aiff
			
			#overwrite output with output2... therefor allowing to keeping using output2
			mv -fv output2.aiff output.aiff
		elif [[ "$file" = "output.aiff" ]] || [[ "$file" = "output2.aiff" ]]; then
		
			echo ""
			echo ""
			echo ""
			echo "DONE"
			echo ""
			echo ""
			
			exit 0
		fi
	fi
	
	lastFile="$file"
	lastDuration="$duration"
	((num++)) 	
done   